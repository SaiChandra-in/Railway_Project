//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project_Railways.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Globalization;
    using System.Runtime.CompilerServices;
    using System.Web.ModelBinding;

    [DistinctLocations]
    public partial class SCHEDULE
    {
        [Required(ErrorMessage = "location is required")]
        public string start_location { get; set; }
        [Required(ErrorMessage ="Location is required")]
        public string destination_location { get; set; }
        [Required(ErrorMessage ="Price is required")]
        public Nullable<decimal> price { get; set; }
        [Required(ErrorMessage ="date field is required")]
        [DataType(DataType.Date)]
        //[Range(typeof(Date),"07-08-2024", "07-08-3024", ErrorMessage = "DOB should b/w 07-08-2024 and 07-08-3024")]
        public Nullable<System.DateTime> start_date_time { get; set; }
        [Required(ErrorMessage = "date field is required")]
        [DataType(DataType.Date)]
        public Nullable<System.DateTime> destination_date_time { get; set; }
        public Nullable<int> train_id { get; set; }
        public int Schedule_id { get; set; }
    
        public virtual Train Train { get; set; }
    }


[AttributeUsage(AttributeTargets.Class)]
    public sealed class DistinctLocationsAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var schedule = (SCHEDULE)validationContext.ObjectInstance;

            if (schedule.start_location == schedule.destination_location)
            {
                return new ValidationResult("Start location and destination location cannot be the same.");
            }

            return ValidationResult.Success;
        }
    }

}
